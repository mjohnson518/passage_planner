apiVersion: v1
kind: Namespace
metadata:
  name: passage-planner
  labels:
    name: passage-planner
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: passage-planner
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  MCP_ORCHESTRATOR_PORT: "8080"
  MCP_AGENT_TIMEOUT: "30000"
  REDIS_URL: "redis://redis-service:6379"
  PROMETHEUS_PORT: "9090"
  GRAFANA_PORT: "3000"

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: passage-planner
type: Opaque
stringData:
  DATABASE_URL: "postgresql://admin:${DB_PASSWORD}@postgres-service:5432/passage_planner?sslmode=require"
  JWT_SECRET: "${JWT_SECRET}"
  NOAA_API_KEY: "${NOAA_API_KEY}"
  OPENWEATHER_API_KEY: "${OPENWEATHER_API_KEY}"
  WINDY_API_KEY: "${WINDY_API_KEY}"
  ENCRYPTION_KEY: "${ENCRYPTION_KEY}"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: passage-planner
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgis/postgis:15-3.3
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: passage_planner
        - name: POSTGRES_USER
          value: admin
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - admin
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - admin
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 50Gi

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: passage-planner
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        volumeMounts:
        - name: redis-config
          mountPath: /usr/local/etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      resources:
        requests:
          storage: 10Gi

---
# Orchestrator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator
  namespace: passage-planner
spec:
  replicas: 3
  selector:
    matchLabels:
      app: orchestrator
  template:
    metadata:
      labels:
        app: orchestrator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: orchestrator-sa
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - orchestrator
              topologyKey: kubernetes.io/hostname
      containers:
      - name: orchestrator
        image: passage-planner/orchestrator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: mcp
        - containerPort: 8081
          name: health
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: JWT_SECRET
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
# Weather Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-agent
  namespace: passage-planner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: weather-agent
  template:
    metadata:
      labels:
        app: weather-agent
        agent-type: specialized
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - weather-agent
              topologyKey: kubernetes.io/hostname
      containers:
      - name: weather-agent
        image: passage-planner/weather-agent:v1.0.0
        imagePullPolicy: Always
        env:
        - name: AGENT_ID
          value: "weather-agent"
        - name: ORCHESTRATOR_URL
          value: "http://orchestrator-service:8080"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_URL
        - name: NOAA_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: NOAA_API_KEY
        - name: OPENWEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: OPENWEATHER_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
# Wind Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wind-agent
  namespace: passage-planner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wind-agent
  template:
    metadata:
      labels:
        app: wind-agent
        agent-type: specialized
    spec:
      containers:
      - name: wind-agent
        image: passage-planner/wind-agent:v1.0.0
        imagePullPolicy: Always
        env:
        - name: AGENT_ID
          value: "wind-agent"
        - name: ORCHESTRATOR_URL
          value: "http://orchestrator-service:8080"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_URL
        - name: WINDY_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: WINDY_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Tidal Agent Deployment (similar pattern for other agents)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tidal-agent
  namespace: passage-planner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tidal-agent
  template:
    metadata:
      labels:
        app: tidal-agent
        agent-type: specialized
    spec:
      containers:
      - name: tidal-agent
        image: passage-planner/tidal-agent:v1.0.0
        imagePullPolicy: Always
        env:
        - name: AGENT_ID
          value: "tidal-agent"
        - name: ORCHESTRATOR_URL
          value: "http://orchestrator-service:8080"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_URL
        - name: NOAA_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: NOAA_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: passage-planner
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: passage-planner/frontend:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.passage-planner.com"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://api.passage-planner.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: passage-planner
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: passage-planner
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-service
  namespace: passage-planner
spec:
  selector:
    app: orchestrator
  ports:
  - name: mcp
    port: 8080
    targetPort: 8080
  - name: health
    port: 8081
    targetPort: 8081
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: passage-planner
spec:
  selector:
    app: frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: passage-planner-ingress
  namespace: passage-planner
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/websocket-services: "orchestrator-service"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - passage-planner.com
    - api.passage-planner.com
    secretName: passage-planner-tls
  rules:
  - host: passage-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  - host: api.passage-planner.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: orchestrator-service
            port:
              number: 8080

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orchestrator-hpa
  namespace: passage-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orchestrator
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orchestrator-pdb
  namespace: passage-planner
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: orchestrator

---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: passage-planner-network-policy
  namespace: passage-planner
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {}
  egress:
  - to:
    - podSelector: {}
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.169.254/32 